// lib/services/horoscope_service.dart
// üîÆ SERWIS HOROSKOP√ìW - integracja z Firebase i AI backend
// Zgodny z wytycznymi projektu AI Wr√≥≈ºka - ZAKTUALIZOWANY dla nowej struktury Firebase

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:intl/intl.dart';
import 'logging_service.dart';
import 'package:ai_wrozka/models/horoscope_data.dart';

class HoroscopeService {
  static final HoroscopeService _instance = HoroscopeService._internal();
  factory HoroscopeService() => _instance;
  HoroscopeService._internal();

  // üî• Firebase Firestore
  FirebaseFirestore? _firestore;

  // üìù Logging zgodnie z wytycznymi
  final LoggingService _logger = LoggingService();

  // üè† Kolekcje horoskop√≥w w Firestore - NOWA STRUKTURA
  static const String _horoscopesCollection = 'horoscopes';
  static const String _dailySubCollection = 'daily';
  static const String _weeklySubCollection = 'weekly';
  static const String _monthlySubCollection = 'monthly';

  // üåü Znaki zodiaku - angielskie nazwy zgodne z Firebase
  static const List<String> _zodiacSigns = [
    'aries',
    'taurus',
    'gemini',
    'cancer',
    'leo',
    'virgo',
    'libra',
    'scorpio',
    'sagittarius',
    'capricorn',
    'aquarius',
    'pisces'
  ];

  // üîÑ Mapowanie polskich nazw na angielskie
  static const Map<String, String> _polishToEnglishZodiac = {
    'Baran': 'aries',
    'Byk': 'taurus',
    'Bli≈∫niƒôta': 'gemini',
    'Rak': 'cancer',
    'Lew': 'leo',
    'Panna': 'virgo',
    'Waga': 'libra',
    'Skorpion': 'scorpio',
    'Strzelec': 'sagittarius',
    'Kozioro≈ºec': 'capricorn',
    'Wodnik': 'aquarius',
    'Ryby': 'pisces',
  };

  /// üöÄ Inicjalizacja serwisu
  Future<bool> initialize() async {
    try {
      _logger.logToConsole('Inicjalizacja HoroscopeService...',
          tag: 'HOROSCOPE');

      // Sprawd≈∫ czy Firebase jest zainicjalizowany
      if (Firebase.apps.isEmpty) {
        _logger.logToConsole('‚ùå Firebase nie jest zainicjalizowany',
            tag: 'ERROR');
        return false;
      }

      _firestore = FirebaseFirestore.instance;
      _logger.logToConsole('‚úÖ HoroscopeService zainicjalizowany pomy≈õlnie',
          tag: 'HOROSCOPE');
      return true;
    } catch (e) {
      _logger.logToConsole('‚ùå B≈ÇƒÖd inicjalizacji HoroscopeService: $e',
          tag: 'ERROR');
      return false;
    }
  }

  /// üîÑ Konwertuj polskƒÖ nazwƒô znaku na angielskƒÖ
  String _convertZodiacToEnglish(String zodiacSign) {
    return _polishToEnglishZodiac[zodiacSign] ?? zodiacSign.toLowerCase();
  }

  /// üìÖ Pobierz horoskop dzienny dla znaku zodiaku - NOWA STRUKTURA
  Future<HoroscopeData?> getDailyHoroscope(String zodiacSign,
      {DateTime? date}) async {
    final targetDate = date ?? DateTime.now();

    try {
      final dateString = DateFormat('yyyy-MM-dd').format(targetDate);
      final englishZodiac = _convertZodiacToEnglish(zodiacSign);

      _logger.logToConsole(
          'Pobieranie horoskopu: $englishZodiac na $dateString',
          tag: 'HOROSCOPE');

      if (_firestore == null) {
        _logger.logToConsole('‚ùå Firestore nie jest zainicjalizowany',
            tag: 'ERROR');
        return _getFallbackHoroscope(englishZodiac, targetDate);
      }

      // NOWA ≈öCIE≈ªKA: horoscopes/daily/[zodiacSign]/[date]
      final docRef = _firestore!
          .collection(_horoscopesCollection)
          .doc(_dailySubCollection)
          .collection(englishZodiac)
          .doc(dateString);

      final docSnapshot = await docRef.get();

      if (docSnapshot.exists && docSnapshot.data() != null) {
        _logger.logToConsole('‚úÖ Znaleziono horoskop w Firebase',
            tag: 'HOROSCOPE');
        return HoroscopeData.fromFirestore(docSnapshot);
      } else {
        _logger.logToConsole('‚ö†Ô∏è Brak horoskopu w Firebase - u≈ºywam fallback',
            tag: 'HOROSCOPE');
        return _getFallbackHoroscope(englishZodiac, targetDate);
      }
    } catch (e) {
      _logger.logToConsole('‚ùå B≈ÇƒÖd pobierania horoskopu: $e', tag: 'ERROR');
      return _getFallbackHoroscope(zodiacSign, targetDate);
    }
  }

  /// üìÖ Pobierz horoskop tygodniowy - NOWA IMPLEMENTACJA
  Future<HoroscopeData?> getWeeklyHoroscope(String zodiacSign,
      {DateTime? date}) async {
    final targetDate = date ?? DateTime.now();

    try {
      final englishZodiac = _convertZodiacToEnglish(zodiacSign);
      final weekKey = _getWeekKey(targetDate);

      _logger.logToConsole(
          'Pobieranie horoskopu tygodniowego: $englishZodiac ($weekKey)',
          tag: 'HOROSCOPE');

      if (_firestore == null) {
        _logger.logToConsole('‚ùå Firestore nie jest zainicjalizowany',
            tag: 'ERROR');
        return _getFallbackWeeklyHoroscope(englishZodiac, targetDate);
      }

      // ≈öCIE≈ªKA: horoscopes/weekly/weeks/[weekKey] -> znajd≈∫ dokument ze zodiacSign
      final collectionRef = _firestore!
          .collection(_horoscopesCollection)
          .doc(_weeklySubCollection)
          .collection('weeks')
          .doc(weekKey);

      final docSnapshot = await collectionRef.get();

      if (docSnapshot.exists && docSnapshot.data() != null) {
        final data = docSnapshot.data()!;
        if (data['zodiacSign'] == englishZodiac) {
          _logger.logToConsole('‚úÖ Znaleziono horoskop tygodniowy w Firebase',
              tag: 'HOROSCOPE');
          return HoroscopeData.fromFirestore(docSnapshot);
        }
      }

      _logger.logToConsole('‚ö†Ô∏è Brak horoskopu tygodniowego - u≈ºywam fallback',
          tag: 'HOROSCOPE');
      return _getFallbackWeeklyHoroscope(englishZodiac, targetDate);
    } catch (e) {
      _logger.logToConsole('‚ùå B≈ÇƒÖd pobierania horoskopu tygodniowego: $e',
          tag: 'ERROR');
      return _getFallbackWeeklyHoroscope(zodiacSign, targetDate);
    }
  }

  /// üìÖ Pobierz horoskop miesiƒôczny - NOWA IMPLEMENTACJA
  Future<HoroscopeData?> getMonthlyHoroscope(String zodiacSign,
      {DateTime? date}) async {
    final targetDate = date ?? DateTime.now();

    try {
      final englishZodiac = _convertZodiacToEnglish(zodiacSign);
      final monthKey = _getMonthKey(targetDate);

      _logger.logToConsole(
          'Pobieranie horoskopu miesiƒôcznego: $englishZodiac ($monthKey)',
          tag: 'HOROSCOPE');

      if (_firestore == null) {
        _logger.logToConsole('‚ùå Firestore nie jest zainicjalizowany',
            tag: 'ERROR');
        return _getFallbackMonthlyHoroscope(englishZodiac, targetDate);
      }

      // ≈öCIE≈ªKA: horoscopes/monthly/months/[monthKey] -> znajd≈∫ dokument ze zodiacSign
      final collectionRef = _firestore!
          .collection(_horoscopesCollection)
          .doc(_monthlySubCollection)
          .collection('months')
          .doc(monthKey);

      final docSnapshot = await collectionRef.get();

      if (docSnapshot.exists && docSnapshot.data() != null) {
        final data = docSnapshot.data()!;
        if (data['zodiacSign'] == englishZodiac) {
          _logger.logToConsole('‚úÖ Znaleziono horoskop miesiƒôczny w Firebase',
              tag: 'HOROSCOPE');
          return HoroscopeData.fromFirestore(docSnapshot);
        }
      }

      _logger.logToConsole('‚ö†Ô∏è Brak horoskopu miesiƒôcznego - u≈ºywam fallback',
          tag: 'HOROSCOPE');
      return _getFallbackMonthlyHoroscope(englishZodiac, targetDate);
    } catch (e) {
      _logger.logToConsole('‚ùå B≈ÇƒÖd pobierania horoskopu miesiƒôcznego: $e',
          tag: 'ERROR');
      return _getFallbackMonthlyHoroscope(zodiacSign, targetDate);
    }
  }

  /// üìä Pobierz wszystkie horoskopy dzienne na dany dzie≈Ñ
  Future<List<HoroscopeData>> getAllDailyHoroscopes({DateTime? date}) async {
    final targetDate = date ?? DateTime.now();

    try {
      final dateString = DateFormat('yyyy-MM-dd').format(targetDate);

      _logger.logToConsole('Pobieranie wszystkich horoskop√≥w na $dateString',
          tag: 'HOROSCOPE');

      final List<HoroscopeData> horoscopes = [];

      if (_firestore == null) {
        _logger.logToConsole('‚ùå Firestore niedostƒôpny - u≈ºywam fallback',
            tag: 'ERROR');
        return _getAllFallbackHoroscopes(targetDate);
      }

      // Pobierz wszystkie znaki zodiaku
      for (String sign in _zodiacSigns) {
        final horoscope = await getDailyHoroscope(sign, date: targetDate);
        if (horoscope != null) {
          horoscopes.add(horoscope);
        }
      }

      _logger.logToConsole('‚úÖ Pobrano ${horoscopes.length} horoskop√≥w',
          tag: 'HOROSCOPE');
      return horoscopes;
    } catch (e) {
      _logger.logToConsole('‚ùå B≈ÇƒÖd pobierania wszystkich horoskop√≥w: $e',
          tag: 'ERROR');
      return _getAllFallbackHoroscopes(targetDate);
    }
  }

  /// üîç Sprawd≈∫ czy horoskopy sƒÖ dostƒôpne dla danej daty
  Future<bool> areHoroscopesAvailable(
      {DateTime? date, String type = 'daily'}) async {
    try {
      final targetDate = date ?? DateTime.now();
      String docId;

      switch (type) {
        case 'weekly':
          docId = _getWeekKey(targetDate);
          break;
        case 'monthly':
          docId = _getMonthKey(targetDate);
          break;
        default:
          docId = DateFormat('yyyy-MM-dd').format(targetDate);
          break;
      }

      if (_firestore == null) return false;

      final docRef = _firestore!
          .collection(_horoscopesCollection)
          .doc(type)
          .collection(type == 'daily' ? 'aquarius' : '${type}s')
          .doc(docId);

      final docSnapshot = await docRef.get();
      return docSnapshot.exists;
    } catch (e) {
      _logger.logToConsole('‚ùå B≈ÇƒÖd sprawdzania dostƒôpno≈õci: $e', tag: 'ERROR');
      return false;
    }
  }

  /// üóìÔ∏è Generuj klucz tygodnia
  String _getWeekKey(DateTime date) {
    final year = date.year;
    final weekNumber = _getWeekNumber(date);
    return '$year-W${weekNumber.toString().padLeft(2, '0')}';
  }

  /// üìÖ Generuj klucz miesiƒÖca
  String _getMonthKey(DateTime date) {
    return DateFormat('yyyy-MM').format(date);
  }

  /// üìä Oblicz numer tygodnia
  int _getWeekNumber(DateTime date) {
    final startOfYear = DateTime(date.year, 1, 1);
    final firstMonday =
        startOfYear.add(Duration(days: (8 - startOfYear.weekday) % 7));

    if (date.isBefore(firstMonday)) {
      return _getWeekNumber(DateTime(date.year - 1, 12, 31));
    }

    return ((date.difference(firstMonday).inDays) / 7).floor() + 1;
  }

  /// üåô Oblicz fazƒô ksiƒô≈ºyca
  String calculateMoonPhase(DateTime date) {
    final daysSinceNewMoon =
        date.difference(DateTime(2000, 1, 6)).inDays % 29.53;

    if (daysSinceNewMoon < 1.84) return 'N√≥w';
    if (daysSinceNewMoon < 5.53) return 'PrzybywajƒÖcy sierp';
    if (daysSinceNewMoon < 9.22) return 'Pierwsza kwadra';
    if (daysSinceNewMoon < 12.91) return 'PrzybywajƒÖcy garb';
    if (daysSinceNewMoon < 16.61) return 'Pe≈Çnia';
    if (daysSinceNewMoon < 20.30) return 'UbywajƒÖcy garb';
    if (daysSinceNewMoon < 23.99) return 'Ostatnia kwadra';
    if (daysSinceNewMoon < 27.68) return 'UbywajƒÖcy sierp';
    return 'N√≥w';
  }

  /// üõ°Ô∏è Fallback horoskop gdy Firebase nie dzia≈Ça
  HoroscopeData _getFallbackHoroscope(String zodiacSign, DateTime date) {
    final moonPhase = calculateMoonPhase(date);

    final fallbackTexts = {
      'aries':
          'Dzisiaj Twoja energia i determinacja bƒôdƒÖ kluczowe. Podejmij odwa≈ºne decyzje, ale pamiƒôtaj o dyplomacji w kontaktach z innymi.',
      'taurus':
          'Stabilno≈õƒá i praktyczno≈õƒá pomogƒÖ Ci osiƒÖgnƒÖƒá cele. Skup siƒô na budowaniu trwa≈Çych fundament√≥w.',
      'gemini':
          'Twoja komunikatywno≈õƒá otwiera nowe mo≈ºliwo≈õci. Wykorzystaj umiejƒôtno≈õƒá adaptacji do zmieniajƒÖcych siƒô sytuacji.',
      'cancer':
          'Intuicja podpowiada w≈Ça≈õciwe decyzje. Zadbaj o r√≥wnowagƒô miƒôdzy ≈ºyciem zawodowym a osobistym.',
      'leo':
          'Twoje przyw√≥dztwo jest dzisiaj szczeg√≥lnie potrzebne. Inspiruj innych swojƒÖ kreatywno≈õciƒÖ i entuzjazmem.',
      'virgo':
          'Uwaga na szczeg√≥≈Çy przynosi doskona≈Çe rezultaty. Metodyczne podej≈õcie zaprowadzi Ciƒô do sukcesu.',
      'libra':
          'Harmonia i r√≥wnowaga sƒÖ kluczowe. Polegaj na swojej naturalnej dyplomacji w trudnych sytuacjach.',
      'scorpio':
          'Twoja intuicja jest wyjƒÖtkowo silna. Wykorzystaj tƒô moc do przekszta≈Çcenia plan√≥w w rzeczywisto≈õƒá.',
      'sagittarius':
          'Optymizm i poszukiwanie przyg√≥d otwierajƒÖ nowe horyzonty. PodƒÖ≈ºaj za swoimi marzeniami.',
      'capricorn':
          'Konsekwencja i cierpliwo≈õƒá przynoszƒÖ wymierne korzy≈õci. Twoje ambicje znajdƒÖ uznanie.',
      'aquarius':
          'Twoja oryginalno≈õƒá inspiruje innych. Wykorzystaj innowacyjne my≈õlenie do rozwiƒÖzania problem√≥w.',
      'pisces':
          'Wra≈ºliwo≈õƒá i empatia sƒÖ Twoimi mocnymi stronami. Zaufaj swojej intuicji w wa≈ºnych decyzjach.',
    };

    return HoroscopeData(
      zodiacSign: zodiacSign,
      text: fallbackTexts[zodiacSign] ??
          'Dzisiaj jest dobry dzie≈Ñ na nowe poczƒÖtki.',
      date: date,
      moonPhase: moonPhase,
      moonEmoji: _getMoonEmoji(moonPhase),
      isFromAI: false,
      createdAt: DateTime.now(),
      type: 'daily',
      generatedBy: 'fallback',
      lunarDescription: _getFallbackLunarDescription(moonPhase),
      recommendedCandle: _getFallbackCandle(moonPhase),
      recommendedCandleReason: _getFallbackCandleReason(moonPhase),
    );
  }

  /// üõ°Ô∏è Fallback horoskop tygodniowy
  HoroscopeData _getFallbackWeeklyHoroscope(String zodiacSign, DateTime date) {
    final moonPhase = calculateMoonPhase(date);
    final weekStart = date.subtract(Duration(days: date.weekday - 1));
    final weekEnd = weekStart.add(Duration(days: 6));

    final fallbackTexts = {
      'aries':
          'Ten tydzie≈Ñ przyniesie energiƒô do dzia≈Çania. Poniedzia≈Çek rozpocznij z determinacjƒÖ, ≈õroda mo≈ºe przynie≈õƒá wa≈ºne decyzje.',
      'taurus':
          'Stabilno≈õƒá i konsekwencja bƒôdƒÖ kluczowe w tym tygodniu. Skupuj siƒô na d≈Çugoterminowych celach.',
      'gemini':
          'Komunikacja i elastyczno≈õƒá otworzƒÖ nowe mo≈ºliwo≈õci. ≈öroda mo≈ºe przynie≈õƒá inspirujƒÖce spotkania.',
      'cancer':
          'Intuicja bƒôdzie Twoim przewodnikiem. Zadbaj o r√≥wnowagƒô miƒôdzy pracƒÖ a odpoczynkiem.',
      'leo':
          'Twoje przyw√≥dztwo znajdzie uznanie. PiƒÖtek mo≈ºe przynie≈õƒá wa≈ºne osiƒÖgniƒôcia.',
      'virgo':
          'Precyzja i uwaga na szczeg√≥≈Çy przyniosƒÖ doskona≈Çe rezultaty w tym tygodniu.',
      'libra':
          'Dyplomacja i umiejƒôtno≈õƒá budowania most√≥w bƒôdƒÖ szczeg√≥lnie cenne.',
      'scorpio': 'Intensywno≈õƒá i determinacja pomogƒÖ Ci osiƒÖgnƒÖƒá ambitne cele.',
      'sagittarius':
          'Optymizm i otwarto≈õƒá na nowe do≈õwiadczenia otworzƒÖ fascynujƒÖce mo≈ºliwo≈õci.',
      'capricorn':
          'Metodyczne podej≈õcie i cierpliwo≈õƒá przyniosƒÖ wymierne korzy≈õci.',
      'aquarius': 'Innowacyjne my≈õlenie bƒôdzie Twoim atutem w tym tygodniu.',
      'pisces': 'Intuicja i kreatywno≈õƒá poprowadzƒÖ Ciƒô ku sukcesowi.',
    };

    return HoroscopeData(
      zodiacSign: zodiacSign,
      text: fallbackTexts[zodiacSign] ??
          'Ten tydzie≈Ñ przyniesie nowe mo≈ºliwo≈õci.',
      date: date,
      moonPhase: moonPhase,
      moonEmoji: _getMoonEmoji(moonPhase),
      isFromAI: false,
      createdAt: DateTime.now(),
      type: 'weekly',
      generatedBy: 'fallback',
      weekKey: _getWeekKey(date),
      weekStart: weekStart,
      weekEnd: weekEnd,
    );
  }

  /// üõ°Ô∏è Fallback horoskop miesiƒôczny
  HoroscopeData _getFallbackMonthlyHoroscope(String zodiacSign, DateTime date) {
    final moonPhase = calculateMoonPhase(date);
    final monthStart = DateTime(date.year, date.month, 1);
    final monthEnd = DateTime(date.year, date.month + 1, 0);

    final fallbackTexts = {
      'aries':
          'Ten miesiƒÖc to czas dzia≈Çania i podejmowania odwa≈ºnych decyzji. Energia planet wspiera Twoje inicjatywy.',
      'taurus':
          'Stabilno≈õƒá i konsekwentne budowanie fundament√≥w przyniosƒÖ trwa≈Çe rezultaty w tym miesiƒÖcu.',
      'gemini':
          'Komunikacja i adaptacyjno≈õƒá otworzƒÖ przed TobƒÖ nowe horyzonty. Wykorzystaj swojƒÖ wszechstronno≈õƒá.',
      'cancer':
          'Intuicja i empatia bƒôdƒÖ Twoimi najwiƒôkszymi atutami. Zadbaj o harmoniƒô w relacjach.',
      'leo':
          'Twoja kreatywno≈õƒá i charyzma znajdƒÖ uznanie. To doskona≈Çy czas na realizacjƒô artystycznych projekt√≥w.',
      'virgo':
          'Uwaga na szczeg√≥≈Çy i metodyczne podej≈õcie przyniosƒÖ doskona≈Çe rezultaty.',
      'libra':
          'Harmonia i dyplomacja pomogƒÖ Ci osiƒÖgnƒÖƒá wa≈ºne cele. Relacje z innymi bƒôdƒÖ kluczowe.',
      'scorpio':
          'Transformacja i g≈Çƒôbokie zmiany charakteryzujƒÖ ten miesiƒÖc. Zaufaj swojej intuicji.',
      'sagittarius':
          'Poszukiwanie przyg√≥d i nowych do≈õwiadcze≈Ñ otworzy fascynujƒÖce mo≈ºliwo≈õci.',
      'capricorn':
          'Cierpliwo≈õƒá i wytrwa≈Ço≈õƒá przyniosƒÖ wymierne korzy≈õci. Twoje ambicje znajdƒÖ uznanie.',
      'aquarius':
          'Innowacyjno≈õƒá i niezale≈ºno≈õƒá bƒôdƒÖ Twoimi najcenniejszymi atutami.',
      'pisces':
          'Wra≈ºliwo≈õƒá i intuicja poprowadzƒÖ Ciƒô ku duchowemu rozwojowi i kreatywnym osiƒÖgniƒôciom.',
    };

    return HoroscopeData(
      zodiacSign: zodiacSign,
      text: fallbackTexts[zodiacSign] ??
          'Ten miesiƒÖc przyniesie pozytywne zmiany.',
      date: date,
      moonPhase: moonPhase,
      moonEmoji: _getMoonEmoji(moonPhase),
      isFromAI: false,
      createdAt: DateTime.now(),
      type: 'monthly',
      generatedBy: 'fallback',
      monthKey: _getMonthKey(date),
      monthName: _getMonthName(date),
      monthStart: monthStart,
      monthEnd: monthEnd,
    );
  }

  /// üåô Emoji dla fazy ksiƒô≈ºyca
  String _getMoonEmoji(String moonPhase) {
    const moonEmojis = {
      'N√≥w': 'üåë',
      'PrzybywajƒÖcy sierp': 'üåí',
      'Pierwsza kwadra': 'üåì',
      'PrzybywajƒÖcy garb': 'üåî',
      'Pe≈Çnia': 'üåï',
      'UbywajƒÖcy garb': 'üåñ',
      'Ostatnia kwadra': 'üåó',
      'UbywajƒÖcy sierp': 'üåò',
    };

    return moonEmojis[moonPhase] ?? 'üåô';
  }

  /// üåô Fallback opis ksiƒô≈ºycowy
  String _getFallbackLunarDescription(String moonPhase) {
    const lunarDescriptions = {
      'N√≥w':
          'Dzi≈õ panuje energia Nowiu, symbolizujƒÖca **nowe poczƒÖtki i czystƒÖ kartƒô**. To idealny czas na zasiewanie intencji.',
      'PrzybywajƒÖcy sierp':
          'Energia przybywajƒÖcego sierpa wspiera **inicjowanie nowych projekt√≥w**. Czas na pierwsze kroki.',
      'Pierwsza kwadra':
          'Pierwsza kwadra to moment **podejmowania wa≈ºnych decyzji**. Przezwyciƒô≈ºaj przeszkody z determinacjƒÖ.',
      'PrzybywajƒÖcy garb':
          'Energia przybywajƒÖcego garba zachƒôca do **wytrwa≈Çej pracy**. Efekty bƒôdƒÖ wkr√≥tce widoczne.',
      'Pe≈Çnia':
          'Pe≈Çnia to **szczyt energii lunalnej**. Czas manifestacji i celebrowania osiƒÖgniƒôƒá.',
      'UbywajƒÖcy garb':
          'Czas **refleksji nad osiƒÖgniƒôciami**. Podziƒôkuj za to, co uda≈Ço siƒô zrealizowaƒá.',
      'Ostatnia kwadra':
          'Ostatnia kwadra to czas **puszczenia tego, co ju≈º nie s≈Çu≈ºy**. Przygotuj miejsce na nowe.',
      'UbywajƒÖcy sierp':
          'Okres **oczyszczenia i przygotowa≈Ñ** do nowego cyklu ksiƒô≈ºycowego.',
    };

    return lunarDescriptions[moonPhase] ??
        'Ksiƒô≈ºyc wp≈Çywa na nasze emocje i energiƒô. ≈ªyj w zgodzie z jego cyklem.';
  }

  /// üïØÔ∏è Fallback ≈õwieca
  String _getFallbackCandle(String moonPhase) {
    const candles = {
      'N√≥w': 'bia≈Ça',
      'PrzybywajƒÖcy sierp': 'zielona',
      'Pierwsza kwadra': 'czerwona',
      'PrzybywajƒÖcy garb': 'pomara≈Ñczowa',
      'Pe≈Çnia': 'z≈Çota',
      'UbywajƒÖcy garb': 'niebieska',
      'Ostatnia kwadra': 'fioletowa',
      'UbywajƒÖcy sierp': 'czarna',
    };

    return candles[moonPhase] ?? 'bia≈Ça';
  }

  /// üïØÔ∏è Fallback pow√≥d ≈õwiecy
  String _getFallbackCandleReason(String moonPhase) {
    const reasons = {
      'N√≥w':
          'Bia≈Ça ≈õwieca symbolizuje czysto≈õƒá, nowe poczƒÖtki i nieskazitelnƒÖ energiƒô.',
      'PrzybywajƒÖcy sierp':
          'Zielona ≈õwieca wspiera wzrost, rozw√≥j i realizacjƒô nowych plan√≥w.',
      'Pierwsza kwadra':
          'Czerwona ≈õwieca daje si≈Çƒô i determinacjƒô do pokonywania przeszk√≥d.',
      'PrzybywajƒÖcy garb':
          'Pomara≈Ñczowa ≈õwieca wspiera kreatywno≈õƒá i pozytywnƒÖ energiƒô.',
      'Pe≈Çnia':
          'Z≈Çota ≈õwieca symbolizuje obfito≈õƒá, sukces i manifestacjƒô marze≈Ñ.',
      'UbywajƒÖcy garb':
          'Niebieska ≈õwieca przynosi spok√≥j, refleksjƒô i g≈ÇƒôbokƒÖ mƒÖdro≈õƒá.',
      'Ostatnia kwadra':
          'Fioletowa ≈õwieca wspiera transformacjƒô i duchowe oczyszczenie.',
      'UbywajƒÖcy sierp':
          'Czarna ≈õwieca symbolizuje ochronƒô i usuwanie negatywnej energii.',
    };

    return reasons[moonPhase] ??
        'Ta ≈õwieca wspiera Twoje intencje i harmonizuje energiƒô.';
  }

  /// üìÖ Nazwa miesiƒÖca
  String _getMonthName(DateTime date) {
    const monthNames = [
      'Stycze≈Ñ',
      'Luty',
      'Marzec',
      'Kwiecie≈Ñ',
      'Maj',
      'Czerwiec',
      'Lipiec',
      'Sierpie≈Ñ',
      'Wrzesie≈Ñ',
      'Pa≈∫dziernik',
      'Listopad',
      'Grudzie≈Ñ'
    ];

    return monthNames[date.month - 1];
  }

  /// üìã Wszystkie fallback horoskopy
  List<HoroscopeData> _getAllFallbackHoroscopes(DateTime date) {
    final List<HoroscopeData> horoscopes = [];

    // Dodaj wszystkie znaki zodiaku
    for (String sign in _zodiacSigns) {
      horoscopes.add(_getFallbackHoroscope(sign, date));
    }

    return horoscopes;
  }

  /// üîß Metoda do testowania po≈ÇƒÖczenia z Firebase
  Future<bool> testFirebaseConnection() async {
    try {
      if (_firestore == null) return false;

      // Pr√≥ba odczytu test collection
      await _firestore!.collection('test').limit(1).get();
      _logger.logToConsole('‚úÖ Po≈ÇƒÖczenie z Firebase dzia≈Ça', tag: 'HOROSCOPE');
      return true;
    } catch (e) {
      _logger.logToConsole('‚ùå Brak po≈ÇƒÖczenia z Firebase: $e', tag: 'ERROR');
      return false;
    }
  }

  /// üåü Pobierz dostƒôpne znaki zodiaku
  static List<String> get zodiacSigns => List.unmodifiable(_zodiacSigns);

  /// üîÑ Pobierz mapowanie polskich nazw
  static Map<String, String> get polishToEnglishZodiac =>
      Map.unmodifiable(_polishToEnglishZodiac);
}
