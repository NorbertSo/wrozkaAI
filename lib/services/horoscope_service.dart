// lib/services/horoscope_service.dart
// üîÆ SERWIS HOROSKOP√ìW - integracja z Firebase i AI backend
// Zgodny z wytycznymi projektu AI Wr√≥≈ºka

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:intl/intl.dart';
import 'logging_service.dart';
import 'package:ai_wrozka/models/horoscope_data.dart';

class HoroscopeService {
  static final HoroscopeService _instance = HoroscopeService._internal();
  factory HoroscopeService() => _instance;
  HoroscopeService._internal();

  // üî• Firebase Firestore
  FirebaseFirestore? _firestore;

  // üìù Logging zgodnie z wytycznymi
  final LoggingService _logger = LoggingService();

  // üè† Kolekcja horoskop√≥w w Firestore
  static const String _horoscopesCollection = 'horoscopes';

  // üåü Znaki zodiaku
  static const List<String> _zodiacSigns = [
    'aries',
    'taurus',
    'gemini',
    'cancer',
    'leo',
    'virgo',
    'libra',
    'scorpio',
    'sagittarius',
    'capricorn',
    'aquarius',
    'pisces'
  ];

  /// üöÄ Inicjalizacja serwisu
  Future<bool> initialize() async {
    try {
      _logger.logToConsole('Inicjalizacja HoroscopeService...',
          tag: 'HOROSCOPE');

      // Sprawd≈∫ czy Firebase jest zainicjalizowany
      if (Firebase.apps.isEmpty) {
        _logger.logToConsole('‚ùå Firebase nie jest zainicjalizowany',
            tag: 'ERROR');
        return false;
      }

      _firestore = FirebaseFirestore.instance;
      _logger.logToConsole('‚úÖ HoroscopeService zainicjalizowany pomy≈õlnie',
          tag: 'HOROSCOPE');
      return true;
    } catch (e) {
      _logger.logToConsole('‚ùå B≈ÇƒÖd inicjalizacji HoroscopeService: $e',
          tag: 'ERROR');
      return false;
    }
  }

  /// üìÖ Pobierz horoskop dzienny dla znaku zodiaku
  Future<HoroscopeData?> getDailyHoroscope(String zodiacSign,
      {DateTime? date}) async {
    final targetDate = date ?? DateTime.now();

    try {
      final dateString = DateFormat('yyyy-MM-dd').format(targetDate);

      _logger.logToConsole('Pobieranie horoskopu: $zodiacSign na $dateString',
          tag: 'HOROSCOPE');

      if (_firestore == null) {
        _logger.logToConsole('‚ùå Firestore nie jest zainicjalizowany',
            tag: 'ERROR');
        return _getFallbackHoroscope(zodiacSign, targetDate);
      }

      // Pobierz dokument z Firestore
      final docRef = _firestore!
          .collection(_horoscopesCollection)
          .doc(dateString)
          .collection('signs')
          .doc(zodiacSign);

      final docSnapshot = await docRef.get();

      if (docSnapshot.exists && docSnapshot.data() != null) {
        _logger.logToConsole('‚úÖ Znaleziono horoskop w Firebase',
            tag: 'HOROSCOPE');
        return HoroscopeData.fromFirestore(docSnapshot);
      } else {
        _logger.logToConsole('‚ö†Ô∏è Brak horoskopu w Firebase - u≈ºywam fallback',
            tag: 'HOROSCOPE');
        return _getFallbackHoroscope(zodiacSign, targetDate);
      }
    } catch (e) {
      _logger.logToConsole('‚ùå B≈ÇƒÖd pobierania horoskopu: $e', tag: 'ERROR');
      return _getFallbackHoroscope(zodiacSign, targetDate);
    }
  }

  /// üìÖ Pobierz horoskop ksiƒô≈ºycowy (lunar)
  Future<HoroscopeData?> getLunarHoroscope({DateTime? date}) async {
    final targetDate = date ?? DateTime.now();

    try {
      final dateString = DateFormat('yyyy-MM-dd').format(targetDate);

      _logger.logToConsole('Pobieranie horoskopu ksiƒô≈ºycowego na $dateString',
          tag: 'HOROSCOPE');

      if (_firestore == null) {
        return _getFallbackLunarHoroscope(targetDate);
      }

      final docRef = _firestore!
          .collection(_horoscopesCollection)
          .doc(dateString)
          .collection('signs')
          .doc('lunar');

      final docSnapshot = await docRef.get();

      if (docSnapshot.exists && docSnapshot.data() != null) {
        _logger.logToConsole('‚úÖ Znaleziono horoskop ksiƒô≈ºycowy w Firebase',
            tag: 'HOROSCOPE');
        return HoroscopeData.fromFirestore(docSnapshot);
      } else {
        _logger.logToConsole('‚ö†Ô∏è Brak horoskopu ksiƒô≈ºycowego - u≈ºywam fallback',
            tag: 'HOROSCOPE');
        return _getFallbackLunarHoroscope(targetDate);
      }
    } catch (e) {
      _logger.logToConsole('‚ùå B≈ÇƒÖd pobierania horoskopu ksiƒô≈ºycowego: $e',
          tag: 'ERROR');
      return _getFallbackLunarHoroscope(targetDate);
    }
  }

  /// üìä Pobierz wszystkie horoskopy na dany dzie≈Ñ
  Future<List<HoroscopeData>> getAllDailyHoroscopes({DateTime? date}) async {
    final targetDate = date ?? DateTime.now();

    try {
      final dateString = DateFormat('yyyy-MM-dd').format(targetDate);

      _logger.logToConsole('Pobieranie wszystkich horoskop√≥w na $dateString',
          tag: 'HOROSCOPE');

      final List<HoroscopeData> horoscopes = [];

      if (_firestore == null) {
        _logger.logToConsole('‚ùå Firestore niedostƒôpny - u≈ºywam fallback',
            tag: 'ERROR');
        return _getAllFallbackHoroscopes(targetDate);
      }

      // Pobierz wszystkie znaki zodiaku
      for (String sign in _zodiacSigns) {
        final horoscope = await getDailyHoroscope(sign, date: targetDate);
        if (horoscope != null) {
          horoscopes.add(horoscope);
        }
      }

      // Dodaj horoskop ksiƒô≈ºycowy
      final lunarHoroscope = await getLunarHoroscope(date: targetDate);
      if (lunarHoroscope != null) {
        horoscopes.add(lunarHoroscope);
      }

      _logger.logToConsole('‚úÖ Pobrano ${horoscopes.length} horoskop√≥w',
          tag: 'HOROSCOPE');
      return horoscopes;
    } catch (e) {
      _logger.logToConsole('‚ùå B≈ÇƒÖd pobierania wszystkich horoskop√≥w: $e',
          tag: 'ERROR');
      return _getAllFallbackHoroscopes(targetDate);
    }
  }

  /// üîç Sprawd≈∫ czy horoskopy sƒÖ dostƒôpne dla danej daty
  Future<bool> areHoroscopesAvailable({DateTime? date}) async {
    try {
      final targetDate = date ?? DateTime.now();
      final dateString = DateFormat('yyyy-MM-dd').format(targetDate);

      if (_firestore == null) return false;

      final docRef =
          _firestore!.collection(_horoscopesCollection).doc(dateString);
      final docSnapshot = await docRef.get();

      return docSnapshot.exists;
    } catch (e) {
      _logger.logToConsole('‚ùå B≈ÇƒÖd sprawdzania dostƒôpno≈õci: $e', tag: 'ERROR');
      return false;
    }
  }

  /// üåô Oblicz fazƒô ksiƒô≈ºyca
  String calculateMoonPhase(DateTime date) {
    // Uproszczony algorytm - w pe≈Çnej wersji mo≈ºna u≈ºyƒá dok≈Çadniejszych oblicze≈Ñ
    final daysSinceNewMoon =
        date.difference(DateTime(2000, 1, 6)).inDays % 29.53;

    if (daysSinceNewMoon < 1.84) return 'N√≥w Ksiƒô≈ºyca';
    if (daysSinceNewMoon < 5.53) return 'PrzybywajƒÖcy sierp';
    if (daysSinceNewMoon < 9.22) return 'Pierwsza kwadra';
    if (daysSinceNewMoon < 12.91) return 'PrzybywajƒÖcy garb';
    if (daysSinceNewMoon < 16.61) return 'Pe≈Çnia';
    if (daysSinceNewMoon < 20.30) return 'UbywajƒÖcy garb';
    if (daysSinceNewMoon < 23.99) return 'Ostatnia kwadra';
    if (daysSinceNewMoon < 27.68) return 'UbywajƒÖcy sierp';
    return 'N√≥w Ksiƒô≈ºyca';
  }

  /// üõ°Ô∏è Fallback horoskop gdy Firebase nie dzia≈Ça
  HoroscopeData _getFallbackHoroscope(String zodiacSign, DateTime date) {
    final moonPhase = calculateMoonPhase(date);

    final fallbackTexts = {
      'aries':
          'Dzisiaj Twoja energia i determinacja bƒôdƒÖ kluczowe. Podejmij odwa≈ºne decyzje, ale pamiƒôtaj o dyplomacji w kontaktach z innymi.',
      'taurus':
          'Stabilno≈õƒá i wytrwa≈Ço≈õƒá to Twoje atuty dzisiaj. Skoncentruj siƒô na praktycznych sprawach i nie spiesz siƒô z wa≈ºnymi decyzjami.',
      'gemini':
          'Komunikacja bƒôdzie dzisiaj szczeg√≥lnie wa≈ºna. Wykorzystaj swojƒÖ naturalnƒÖ ciekawo≈õƒá i umiejƒôtno≈õƒá nawiƒÖzywania kontakt√≥w.',
      'cancer':
          'Intuicja prowadzi Ciƒô we w≈Ça≈õciwym kierunku. Zaufaj swoim przeczuciom, szczeg√≥lnie w sprawach osobistych.',
      'leo':
          'Twoja charyzma i pewno≈õƒá siebie bƒôdƒÖ dzisiaj szczeg√≥lnie widoczne. To dobry czas na prezentacjƒô swoich pomys≈Ç√≥w.',
      'virgo':
          'Precyzja i uwaga na szczeg√≥≈Çy pomogƒÖ Ci dzisiaj osiƒÖgnƒÖƒá cele. Systematyczne podej≈õcie przyniesie najlepsze rezultaty.',
      'libra':
          'Harmonia i r√≥wnowaga sƒÖ dzi≈õ kluczowe. Staraj siƒô unikaƒá konflikt√≥w i szukaj kompromis√≥w w trudnych sytuacjach.',
      'scorpio':
          'G≈Çƒôboka analiza i intuicja pomogƒÖ Ci odkryƒá ukryte prawdy. Nie b√≥j siƒô spojrzeƒá na sprawy z nowej perspektywy.',
      'sagittarius':
          'Optymizm i otwarto≈õƒá na nowe do≈õwiadczenia bƒôdƒÖ Twoimi przewodnikami. To dobry dzie≈Ñ na podr√≥≈ºe lub naukƒô.',
      'capricorn':
          'Ambicja i pracowito≈õƒá przyniosƒÖ dzi≈õ konkretne rezultaty. Skoncentruj siƒô na d≈Çugoterminowych celach.',
      'aquarius':
          'Innowacyjno≈õƒá i niezale≈ºno≈õƒá my≈õlenia bƒôdƒÖ dzisiaj szczeg√≥lnie cenne. Nie b√≥j siƒô byƒá inny.',
      'pisces':
          'Empatia i intuicja to Twoje najwiƒôksze atuty dzisiaj. Zaufaj swoim odczuciom w relacjach z innymi.',
    };

    return HoroscopeData(
      zodiacSign: zodiacSign,
      text: fallbackTexts[zodiacSign] ??
          'Dzisiaj jest dobry dzie≈Ñ na refleksjƒô i podejmowanie pozytywnych dzia≈Ça≈Ñ.',
      date: date,
      moonPhase: moonPhase,
      isFromAI: false,
      createdAt: DateTime.now(),
    );
  }

  /// üåô Fallback horoskop ksiƒô≈ºycowy
  HoroscopeData _getFallbackLunarHoroscope(DateTime date) {
    final moonPhase = calculateMoonPhase(date);

    final lunarTexts = {
      'N√≥w Ksiƒô≈ºyca':
          'Czas nowych poczƒÖtk√≥w i zamierze≈Ñ. Idealna pora na sadzenie ziaren przysz≈Çych sukces√≥w.',
      'PrzybywajƒÖcy sierp':
          'Energia ro≈õnie wraz z Ksiƒô≈ºycem. Czas na dzia≈Çanie i realizacjƒô plan√≥w.',
      'Pierwsza kwadra':
          'Moment podejmowania wa≈ºnych decyzji. Przezwyciƒô≈ºaj przeszkody z determinacjƒÖ.',
      'PrzybywajƒÖcy garb':
          'Kontynuuj wytrwale swojƒÖ pracƒô. Efekty bƒôdƒÖ wkr√≥tce widoczne.',
      'Pe≈Çnia':
          'Szczyt energii lunalnej. Czas manifestacji i celebrowania osiƒÖgniƒôƒá.',
      'UbywajƒÖcy garb':
          'Refleksja nad tym, co zosta≈Ço osiƒÖgniƒôte. Czas na wdziƒôczno≈õƒá.',
      'Ostatnia kwadra':
          'Pu≈õƒá to, co Ci ju≈º nie s≈Çu≈ºy. Przygotuj miejsce na nowe.',
      'UbywajƒÖcy sierp': 'Okres oczyszczenia i przygotowa≈Ñ do nowego cyklu.',
    };

    return HoroscopeData(
      zodiacSign: 'lunar',
      text: lunarTexts[moonPhase] ??
          'Ksiƒô≈ºyc wp≈Çywa na nasze emocje i energiƒô. ≈ªyj w zgodzie z jego cyklem.',
      date: date,
      moonPhase: moonPhase,
      isFromAI: false,
      createdAt: DateTime.now(),
    );
  }

  /// üìã Wszystkie fallback horoskopy
  List<HoroscopeData> _getAllFallbackHoroscopes(DateTime date) {
    final List<HoroscopeData> horoscopes = [];

    // Dodaj wszystkie znaki zodiaku
    for (String sign in _zodiacSigns) {
      horoscopes.add(_getFallbackHoroscope(sign, date));
    }

    // Dodaj horoskop ksiƒô≈ºycowy
    horoscopes.add(_getFallbackLunarHoroscope(date));

    return horoscopes;
  }

  /// üîß Metoda do testowania po≈ÇƒÖczenia z Firebase
  Future<bool> testFirebaseConnection() async {
    try {
      if (_firestore == null) return false;

      // Pr√≥ba odczytu test collection
      await _firestore!.collection('test').limit(1).get();
      _logger.logToConsole('‚úÖ Po≈ÇƒÖczenie z Firebase dzia≈Ça', tag: 'HOROSCOPE');
      return true;
    } catch (e) {
      _logger.logToConsole('‚ùå Brak po≈ÇƒÖczenia z Firebase: $e', tag: 'ERROR');
      return false;
    }
  }
}
