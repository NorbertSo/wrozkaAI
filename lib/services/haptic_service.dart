// lib/services/haptic_service.dart
// Serwis do zarzƒÖdzania wibracjami i haptic feedback

import 'package:flutter/services.dart';
import 'package:vibration/vibration.dart';

enum HapticType {
  light, // Lekka wibracja
  medium, // ≈örednia wibracja
  heavy, // Mocna wibracja
  selection, // Selekcja/prze≈ÇƒÖczanie
  impact, // Uderzenie/potwierdzenie
  success, // Sukces
  warning, // Ostrze≈ºenie
  error, // B≈ÇƒÖd
}

class HapticService {
  static final HapticService _instance = HapticService._internal();
  factory HapticService() => _instance;
  HapticService._internal();

  bool _isEnabled = true;
  bool _hasVibrator = false;

  /// Inicjalizacja serwisu - sprawd≈∫ czy urzƒÖdzenie obs≈Çuguje wibracje
  Future<void> initialize() async {
    try {
      _hasVibrator = await Vibration.hasVibrator() ?? false;
      print('üîä Haptic Service: Vibrator available = $_hasVibrator');
    } catch (e) {
      _hasVibrator = false;
      print('‚ùå Haptic Service error: $e');
    }
  }

  /// W≈ÇƒÖcz/wy≈ÇƒÖcz wibracje globalnie
  void setEnabled(bool enabled) {
    _isEnabled = enabled;
    print('üîä Haptic feedback ${enabled ? "enabled" : "disabled"}');
  }

  /// Sprawd≈∫ czy wibracje sƒÖ w≈ÇƒÖczone
  bool get isEnabled => _isEnabled && _hasVibrator;

  /// G≈Ç√≥wna metoda do wywo≈Çywania wibracji
  Future<void> trigger(HapticType type) async {
    if (!isEnabled) return;

    try {
      switch (type) {
        case HapticType.light:
          await _lightHaptic();
          break;
        case HapticType.medium:
          await _mediumHaptic();
          break;
        case HapticType.heavy:
          await _heavyHaptic();
          break;
        case HapticType.selection:
          await _selectionHaptic();
          break;
        case HapticType.impact:
          await _impactHaptic();
          break;
        case HapticType.success:
          await _successHaptic();
          break;
        case HapticType.warning:
          await warning(); // poprawne wywo≈Çanie publicznej metody
          break;
        case HapticType.error:
          await _errorHaptic();
          break;
      }
    } catch (e) {
      print('‚ùå Haptic feedback error: $e');
    }
  }

  /// LEKKA WIBRACJA - idealna do przycisk√≥w
  Future<void> _lightHaptic() async {
    if (await Vibration.hasCustomVibrationsSupport() == true) {
      // Kr√≥tka, delikatna wibracja
      await Vibration.vibrate(duration: 50, amplitude: 128);
    } else {
      // Fallback dla starszych urzƒÖdze≈Ñ
      HapticFeedback.lightImpact();
    }
  }

  /// ≈öREDNIA WIBRACJA - do wa≈ºniejszych akcji
  Future<void> _mediumHaptic() async {
    if (await Vibration.hasCustomVibrationsSupport() == true) {
      await Vibration.vibrate(duration: 80, amplitude: 180);
    } else {
      HapticFeedback.mediumImpact();
    }
  }

  /// MOCNA WIBRACJA - do bardzo wa≈ºnych akcji
  Future<void> _heavyHaptic() async {
    if (await Vibration.hasCustomVibrationsSupport() == true) {
      await Vibration.vibrate(duration: 120, amplitude: 255);
    } else {
      HapticFeedback.heavyImpact();
    }
  }

  /// SELEKCJA - do prze≈ÇƒÖcznik√≥w, checkbox, radio
  Future<void> _selectionHaptic() async {
    HapticFeedback.selectionClick();
  }

  /// IMPACT - do potwierdze≈Ñ, "klikniƒôƒá"
  Future<void> _impactHaptic() async {
    if (await Vibration.hasCustomVibrationsSupport() == true) {
      await Vibration.vibrate(duration: 60, amplitude: 150);
    } else {
      HapticFeedback.mediumImpact();
    }
  }

  /// SUKCES - podw√≥jna kr√≥tka wibracja
  Future<void> _successHaptic() async {
    if (await Vibration.hasCustomVibrationsSupport() == true) {
      // amplitudes NIE jest wspierane w ka≈ºdej wersji vibration lub na ka≈ºdej platformie!
      // Najnowsze wersje vibration mogƒÖ nie mieƒá ju≈º parametru amplitudes lub jest on tylko na Androidzie.
      // RozwiƒÖzanie: u≈ºyj tylko pattern bez amplitudes.
      await Vibration.vibrate(
        pattern: [0, 100, 50, 100],
        // amplitudes: [0, 200, 0, 200], // USU≈É lub zakomentuj tƒô liniƒô!
      );
    } else {
      HapticFeedback.lightImpact();
      await Future.delayed(const Duration(milliseconds: 100));
      HapticFeedback.lightImpact();
    }
  }

  /// B≈ÅƒÑD - trzyklotna kr√≥tka wibracja
  Future<void> _errorHaptic() async {
    if (await Vibration.hasCustomVibrationsSupport() == true) {
      await Vibration.vibrate(
        pattern: [0, 80, 30, 80, 30, 80],
        // amplitudes: [0, 255, 0, 255, 0, 255], // USU≈É lub zakomentuj tƒô liniƒô!
      );
    } else {
      for (int i = 0; i < 3; i++) {
        HapticFeedback.heavyImpact();
        if (i < 2) await Future.delayed(const Duration(milliseconds: 100));
      }
    }
  }

  /// Wygodne metody dla najczƒô≈õciej u≈ºywanych typ√≥w
  Future<void> buttonPress() => trigger(HapticType.light);
  Future<void> buttonConfirm() => trigger(HapticType.impact);
  Future<void> toggle() => trigger(HapticType.selection);
  Future<void> success() => trigger(HapticType.success);
  Future<void> error() => trigger(HapticType.error);
  Future<void> warning() => trigger(HapticType.warning);

  /// Customowa wibracja z w≈Çasnymi parametrami
  Future<void> customVibration({
    required int duration,
    int amplitude = 128,
  }) async {
    if (!isEnabled) return;

    try {
      if (await Vibration.hasCustomVibrationsSupport() == true) {
        await Vibration.vibrate(
          duration: duration.clamp(10, 1000),
          amplitude: amplitude.clamp(1, 255),
        );
      } else {
        // Fallback dla urzƒÖdze≈Ñ bez custom vibration
        if (duration < 100) {
          HapticFeedback.lightImpact();
        } else if (duration < 200) {
          HapticFeedback.mediumImpact();
        } else {
          HapticFeedback.heavyImpact();
        }
      }
    } catch (e) {
      print('‚ùå Custom vibration error: $e');
    }
  }

  /// Wibracja z wzorcem (pattern)
  Future<void> patternVibration({
    required List<int> pattern,
    List<int>? amplitudes,
  }) async {
    if (!isEnabled) return;

    try {
      if (await Vibration.hasCustomVibrationsSupport() == true) {
        // amplitudes mo≈ºe byƒá null, ale niekt√≥re wersje vibration nie obs≈ÇugujƒÖ parametru amplitudes
        // lub obs≈ÇugujƒÖ tylko na Androidzie. Spr√≥buj przekazaƒá tylko je≈õli amplitudes != null i platforma to Android.
        // Najbezpieczniej: przekazuj amplitudes tylko je≈õli amplitudes != null i nie jeste≈õ na iOS/web.
        // Je≈õli nadal podkre≈õla, u≈ºyj tylko pattern bez amplitudes:
        await Vibration.vibrate(
          pattern: pattern,
          // amplitudes: amplitudes, // KOMENTUJEMY, bo nie zawsze jest wspierane!
        );
      } else {
        // Fallback - symuluj pattern przez HapticFeedback
        for (int i = 0; i < pattern.length; i += 2) {
          if (i + 1 < pattern.length) {
            await Future.delayed(Duration(milliseconds: pattern[i]));
            HapticFeedback.lightImpact();
            if (i + 2 < pattern.length) {
              await Future.delayed(Duration(milliseconds: pattern[i + 1]));
            }
          }
        }
      }
    } catch (e) {
      print('‚ùå Pattern vibration error: $e');
    }
  }

  /// Sprawd≈∫ mo≈ºliwo≈õci urzƒÖdzenia
  Future<Map<String, bool>> getCapabilities() async {
    try {
      return {
        'hasVibrator': await Vibration.hasVibrator() ?? false,
        'hasAmplitudeControl': await Vibration.hasAmplitudeControl() ?? false,
        'hasCustomVibrationsSupport':
            await Vibration.hasCustomVibrationsSupport() ?? false,
      };
    } catch (e) {
      return {
        'hasVibrator': false,
        'hasAmplitudeControl': false,
        'hasCustomVibrationsSupport': false,
      };
    }
  }

  /// Debug info
  Future<void> printCapabilities() async {
    final caps = await getCapabilities();
    print('üîä Haptic Capabilities:');
    caps.forEach((key, value) {
      print('   $key: $value');
    });
  }
}

// Pow√≥d podkre≈õlenia "Vibration":
/// 1. Najczƒô≈õciej: nie masz dodanej paczki vibration w pubspec.yaml lub nie wykona≈Çe≈õ `flutter pub get`.
/// 2. Mo≈ºliwe, ≈ºe importujesz z≈ÇƒÖ paczkƒô lub import jest b≈Çƒôdny.
/// 3. Je≈õli u≈ºywasz web/desktop, paczka vibration nie jest wspierana na tych platformach (tylko Android/iOS).

/// RozwiƒÖzanie:
/// 1. Upewnij siƒô, ≈ºe w pubspec.yaml masz:
///    vibration: ^1.7.4
/// 2. W terminalu uruchom: flutter pub get
/// 3. Upewnij siƒô, ≈ºe importujesz:
///    import 'package:vibration/vibration.dart';
/// 4. Je≈õli nadal podkre≈õla, zrestartuj IDE (czasem cache IntelliSense siƒô psuje).
/// 5. Je≈õli budujesz na web/desktop, kod z vibration bƒôdzie podkre≈õlony, bo nie jest wspierany na tych platformach.

/// Przyk≈Çad sekcji dependencies w pubspec.yaml:
/// dependencies:
///   flutter:
///     sdk: flutter
///   vibration: ^1.7.4
///   flutter:
///     sdk: flutter
///   vibration: ^1.7.4
///   flutter:
///     sdk: flutter
///   vibration: ^1.7.4
///   flutter:
///     sdk: flutter
///   vibration: ^1.7.4
