// ==========================================
// lib/services/extended_horoscope_service.dart
// üîÆ SERWIS HOROSKOPU ROZBUDOWANEGO
// ==========================================

import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/extended_horoscope_data.dart';
// import '../models/monthly_usage_data.dart'; // Usu≈Ñ je≈õli nie masz modelu
// import '../services/logger.dart'; // Usu≈Ñ import loggera

class ExtendedHoroscopeService {
  static final ExtendedHoroscopeService _instance = ExtendedHoroscopeService._internal();
  factory ExtendedHoroscopeService() => _instance;
  ExtendedHoroscopeService._internal();

  FirebaseFirestore? _firestore;
  bool _initialized = false;

  /// üèóÔ∏è Inicjalizacja serwisu
  Future<void> initialize() async {
    if (_initialized) return;

    try {
      _firestore = FirebaseFirestore.instance;
      _initialized = true;
      print('ExtendedHoroscopeService zainicjalizowany');
    } catch (e) {
      print('B≈ÇƒÖd inicjalizacji ExtendedHoroscopeService: $e');
    }
  }

  /// üîÆ Pobierz rozbudowany horoskop
  Future<ExtendedHoroscopeData> getExtendedHoroscope({
    required String zodiacSign,
    required String userName,
    required String userGender,
    DateTime? birthDate,
    String? dominantHand,
    String? relationshipStatus,
    String? primaryConcern,
  }) async {
    await initialize();

    try {
      final today = DateTime.now();
      final dateStr = '${today.year}-${today.month.toString().padLeft(2, '0')}-${today.day.toString().padLeft(2, '0')}';

      // 1Ô∏è‚É£ Sprawd≈∫ cache w Firestore
      final cachedHoroscope = await _getCachedExtendedHoroscope(zodiacSign, dateStr);
      if (cachedHoroscope != null) {
        print('Znaleziono cached rozbudowany horoskop dla $zodiacSign');
        return cachedHoroscope;
      }

      // 2Ô∏è‚É£ Generuj nowy horoskop (AI lub fallback)
      final horoscope = await _generateExtendedHoroscope(
        zodiacSign: zodiacSign,
        userName: userName,
        userGender: userGender,
        birthDate: birthDate,
        dominantHand: dominantHand,
        relationshipStatus: relationshipStatus,
        primaryConcern: primaryConcern,
        dateStr: dateStr,
      );

      // 3Ô∏è‚É£ Zapisz do cache
      await _cacheExtendedHoroscope(zodiacSign, dateStr, horoscope);

      return horoscope;
    } catch (e) {
      print('B≈ÇƒÖd pobierania rozbudowanego horoskopu: $e');
      return _getFallbackExtendedHoroscope(zodiacSign);
    }
  }

  /// üóÇÔ∏è Pobierz cached horoskop
  Future<ExtendedHoroscopeData?> _getCachedExtendedHoroscope(String zodiacSign, String dateStr) async {
    try {
      final doc = await _firestore!
          .collection('extended_horoscopes')
          .doc('${dateStr}_$zodiacSign')
          .get();

      if (doc.exists && doc.data() != null) {
        return ExtendedHoroscopeData.fromFirestore(doc.data()!);
      }
      return null;
    } catch (e) {
      print('B≈ÇƒÖd pobierania cached horoskopu: $e');
      return null;
    }
  }

  /// ü§ñ Generuj nowy horoskop (AI lub fallback)
  Future<ExtendedHoroscopeData> _generateExtendedHoroscope({
    required String zodiacSign,
    required String userName,
    required String userGender,
    DateTime? birthDate,
    String? dominantHand,
    String? relationshipStatus,
    String? primaryConcern,
    required String dateStr,
  }) async {
    try {
      // TODO: Implementacja AI generation przez Firebase Functions
      // Na razie u≈ºywamy fallback
      print('Generowanie AI horoskopu nie jest jeszcze dostƒôpne, u≈ºywam fallback');
      return _getFallbackExtendedHoroscope(zodiacSign);
    } catch (e) {
      print('B≈ÇƒÖd generowania AI horoskopu: $e');
      return _getFallbackExtendedHoroscope(zodiacSign);
    }
  }

  /// üíæ Zapisz do cache
  Future<void> _cacheExtendedHoroscope(String zodiacSign, String dateStr, ExtendedHoroscopeData horoscope) async {
    try {
      await _firestore!
          .collection('extended_horoscopes')
          .doc('${dateStr}_$zodiacSign')
          .set(horoscope.toFirestore());

      print('Horoskop rozbudowany zapisany do cache');
    } catch (e) {
      print('B≈ÇƒÖd zapisywania horoskopu do cache: $e');
    }
  }

  /// üîß Fallback horoskop
  ExtendedHoroscopeData _getFallbackExtendedHoroscope(String zodiacSign) {
    final fallbackTexts = _getFallbackTexts(zodiacSign);

    // Usu≈Ñ pola luckyColor, luckyNumber, bestTimeForActions, generationType je≈õli nie istniejƒÖ w ExtendedHoroscopeData
    return ExtendedHoroscopeData(
      careerPrediction: fallbackTexts['career'] ?? '',
      lovePrediction: fallbackTexts['love'] ?? '',
      financePrediction: fallbackTexts['finance'] ?? '',
      healthPrediction: fallbackTexts['health'] ?? '',
      personalGrowthPrediction: fallbackTexts['growth'] ?? '',
      familyPrediction: fallbackTexts['family'] ?? '',
      moonPhase: _getCurrentMoonPhase(),
      moonEmoji: _getMoonEmoji(),
      recommendedCandle: _getRecommendedCandle(),
      candleReason: _getCandleReason(),
      // luckyColor: _getLuckyColor(zodiacSign), // usu≈Ñ je≈õli nie istnieje
      // luckyNumber: _getLuckyNumber(), // usu≈Ñ je≈õli nie istnieje
      // bestTimeForActions: _getBestTime(), // usu≈Ñ je≈õli nie istnieje
      generatedAt: DateTime.now(),
      zodiacSign: zodiacSign,
      // generationType: 'fallback', // usu≈Ñ je≈õli nie istnieje
    );
  }

  /// üìù Fallback teksty dla wszystkich znak√≥w
  Map<String, String> _getFallbackTexts(String zodiacSign) {
    final Map<String, Map<String, String>> allTexts = {
      'aries': {
        'career': 'Twoja naturalna energia i determinacja przyniosƒÖ dzi≈õ konkretne rezultaty w pracy. ≈ömia≈Ço przedstaw swoje pomys≈Çy prze≈Ço≈ºonym - Twoja pewno≈õƒá siebie otworzy nowe mo≈ºliwo≈õci zawodowe.',
        'love': 'W relacjach panuje dzi≈õ harmonia i wzajemne zrozumienie. Je≈õli jeste≈õ w zwiƒÖzku, to idealny moment na romantyczne gesty. Single mogƒÖ spotkaƒá kogo≈õ intrygujƒÖcego w nieoczekiwanym miejscu.',
        'finance': 'Unikaj dzi≈õ impulsywnych zakup√≥w, szczeg√≥lnie du≈ºych wydatk√≥w. Twoja intuicja finansowa jest wyostrzona - zaufaj jej przy podejmowaniu decyzji o inwestycjach lub oszczƒôdno≈õciach.',
        'health': 'Energia p≈Çynie w Tobie obficie - wykorzystaj jƒÖ do aktywno≈õci fizycznej. Pamiƒôtaj o odpoczynku i regeneracji. Zwr√≥ƒá uwagƒô na dietƒô, szczeg√≥lnie na dostarczanie organizmowi sk≈Çadnik√≥w energetycznych.',
        'growth': 'Dzi≈õ szczeg√≥lnie sprzyjajƒÖ Ci nowe wyzwania intelektualne. To doskona≈Çy moment na rozpoczƒôcie kursu, czytanie rozwojowej ksiƒÖ≈ºki lub eksplorowanie nowych hobby. Tw√≥j umys≈Ç jest wyjƒÖtkowo receptywny.',
        'family': 'Atmosfera w domu jest spokojna i przyjazna. To dobry dzie≈Ñ na rozmowy z bliskimi o przysz≈Ço≈õci i wsp√≥lnych planach. Mo≈ºe pojawiƒá siƒô okazja do pomocy cz≈Çonkowi rodziny w wa≈ºnej sprawie.',
      },
      // TODO: Dodaj wszystkie znaki zodiaku
    };

    return allTexts[zodiacSign.toLowerCase()] ?? allTexts['aries']!;
  }

  /// üåô Pobierz aktualnƒÖ fazƒô ksiƒô≈ºyca
  String _getCurrentMoonPhase() {
    // Simplified moon phase calculation
    final now = DateTime.now();
    final dayOfYear = now.difference(DateTime(now.year, 1, 1)).inDays;
    final moonCycle = dayOfYear % 29;

    if (moonCycle < 2) return 'N√≥w';
    if (moonCycle < 7) return 'PrzybywajƒÖcy sierp';
    if (moonCycle < 9) return 'Pierwsza kwadra';
    if (moonCycle < 14) return 'PrzybywajƒÖcy garb';
    if (moonCycle < 16) return 'Pe≈Çnia';
    if (moonCycle < 21) return 'UbywajƒÖcy garb';
    if (moonCycle < 23) return 'Ostatnia kwadra';
    return 'UbywajƒÖcy sierp';
  }

  String _getMoonEmoji() {
    final phase = _getCurrentMoonPhase();
    const emojis = {
      'N√≥w': 'üåë',
      'PrzybywajƒÖcy sierp': 'üåí',
      'Pierwsza kwadra': 'üåì',
      'PrzybywajƒÖcy garb': 'üåî',
      'Pe≈Çnia': 'üåï',
      'UbywajƒÖcy garb': 'üåñ',
      'Ostatnia kwadra': 'üåó',
      'UbywajƒÖcy sierp': 'üåò',
    };
    return emojis[phase] ?? 'üåë';
  }

  String _getRecommendedCandle() {
    final phase = _getCurrentMoonPhase();
    const candles = {
      'N√≥w': 'bia≈Ça',
      'PrzybywajƒÖcy sierp': 'zielona',
      'Pierwsza kwadra': 'czerwona',
      'PrzybywajƒÖcy garb': 'pomara≈Ñczowa',
      'Pe≈Çnia': 'z≈Çota',
      'UbywajƒÖcy garb': 'niebieska',
      'Ostatnia kwadra': 'fioletowa',
      'UbywajƒÖcy sierp': 'czarna',
    };
    return candles[phase] ?? 'bia≈Ça';
  }

  String _getCandleReason() {
    final phase = _getCurrentMoonPhase();
    const reasons = {
      'N√≥w': 'Bia≈Ça ≈õwieca symbolizuje czysto≈õƒá, nowe poczƒÖtki i nieskazitelnƒÖ energiƒô.',
      'PrzybywajƒÖcy sierp': 'Zielona ≈õwieca wspiera wzrost, rozw√≥j i realizacjƒô nowych plan√≥w.',
      'Pierwsza kwadra': 'Czerwona ≈õwieca daje si≈Çƒô i determinacjƒô do pokonywania przeszk√≥d.',
      'PrzybywajƒÖcy garb': 'Pomara≈Ñczowa ≈õwieca wspiera kreatywno≈õƒá i pozytywnƒÖ energiƒô.',
      'Pe≈Çnia': 'Z≈Çota ≈õwieca symbolizuje obfito≈õƒá, sukces i manifestacjƒô marze≈Ñ.',
      'UbywajƒÖcy garb': 'Niebieska ≈õwieca przynosi spok√≥j, refleksjƒô i g≈ÇƒôbokƒÖ mƒÖdro≈õƒá.',
      'Ostatnia kwadra': 'Fioletowa ≈õwieca wspiera transformacjƒô i duchowe oczyszczenie.',
      'UbywajƒÖcy sierp': 'Czarna ≈õwieca symbolizuje ochronƒô i usuwanie negatywnej energii.',
    };
    return reasons[phase] ?? 'Ta ≈õwieca wspiera Twoje intencje i harmonizuje energiƒô.';
  }

  String _getLuckyColor(String zodiacSign) {
    const colors = {
      'aries': 'czerwony',
      'taurus': 'zielony',
      'gemini': '≈º√≥≈Çty',
      'cancer': 'srebrny',
      'leo': 'z≈Çoty',
      'virgo': 'granatowy',
      'libra': 'r√≥≈ºowy',
      'scorpio': 'bordowy',
      'sagittarius': 'fioletowy',
      'capricorn': 'czarny',
      'aquarius': 'turkusowy',
      'pisces': 'morski',
    };
    return colors[zodiacSign.toLowerCase()] ?? 'bia≈Çy';
  }

  int _getLuckyNumber() {
    return DateTime.now().day % 10 + 1;
  }

  String _getBestTime() {
    final hour = DateTime.now().hour;
    if (hour < 12) return 'rano (6:00-12:00)';
    if (hour < 18) return 'popo≈Çudnie (12:00-18:00)';
    return 'wieczorem (18:00-24:00)';
  }

  /// üìä Sprawd≈∫ czy u≈ºyto darmowego horoskopu w tym miesiƒÖcu
  Future<bool> hasUsedMonthlyFree() async {
    try {
      final userData = await SecureUserService.getUserData();
      if (userData == null) return false;

      final userId = userData.id ?? userData.name;
      final now = DateTime.now();
      final monthKey = '${now.year}_${now.month.toString().padLeft(2, '0')}';

      final doc = await _firestore!
          .collection('monthly_usage')
          .doc('${userId}_$monthKey')
          .get();

      if (doc.exists && doc.data() != null) {
        // Je≈õli nie masz MonthlyUsageData, zamie≈Ñ na prostƒÖ mapƒô
        return doc.data()!['usedFreeExtendedHoroscope'] == true;
      }

      return false;
    } catch (e) {
      print('B≈ÇƒÖd sprawdzania miesiƒôcznego u≈ºycia: $e');
      return false;
    }
  }

  /// ‚úÖ Oznacz darmowy horoskop jako u≈ºyty
  Future<void> markMonthlyFreeAsUsed() async {
    try {
      final userData = await SecureUserService.getUserData();
      if (userData == null) return;

      final userId = userData.id ?? userData.name;
      final now = DateTime.now();
      final monthKey = '${now.year}_${now.month.toString().padLeft(2, '0')}';

      await _firestore!
          .collection('monthly_usage')
          .doc('${userId}_$monthKey')
          .set({
        'userId': userId,
        'year': now.year,
        'month': now.month,
        'usedFreeExtendedHoroscope': true,
        'lastUpdated': DateTime.now(),
      }, SetOptions(merge: true));

      print('Oznaczono darmowy horoskop miesiƒôczny jako u≈ºyty');
    } catch (e) {
      print('B≈ÇƒÖd oznaczania miesiƒôcznego u≈ºycia: $e');
    }
  }
}

// Dodaj tymczasowe klasy/model na g√≥rze pliku je≈õli nie masz ich w projekcie:

class UserData {
  final String name;
  final String? id;
  UserData({required this.name, this.id});
}

class SecureUserService {
  static Future<UserData?> getUserData() async {
    // Zwraca przyk≈Çadowego u≈ºytkownika, zamie≈Ñ na w≈ÇasnƒÖ logikƒô
    return UserData(name: 'demoUser', id: 'demoUserId');
  }
}

class ExtendedHoroscopeData {
  final String careerPrediction;
  final String lovePrediction;
  final String financePrediction;
  final String healthPrediction;
  final String personalGrowthPrediction;
  final String familyPrediction;
  final String moonPhase;
  final String moonEmoji;
  final String recommendedCandle;
  final String candleReason;
  final DateTime generatedAt;
  final String zodiacSign;

  ExtendedHoroscopeData({
    required this.careerPrediction,
    required this.lovePrediction,
    required this.financePrediction,
    required this.healthPrediction,
    required this.personalGrowthPrediction,
    required this.familyPrediction,
    required this.moonPhase,
    required this.moonEmoji,
    required this.recommendedCandle,
    required this.candleReason,
    required this.generatedAt,
    required this.zodiacSign,
  });

  Map<String, dynamic> toFirestore() => {
    'careerPrediction': careerPrediction,
    'lovePrediction': lovePrediction,
    'financePrediction': financePrediction,
    'healthPrediction': healthPrediction,
    'personalGrowthPrediction': personalGrowthPrediction,
    'familyPrediction': familyPrediction,
    'moonPhase': moonPhase,
    'moonEmoji': moonEmoji,
    'recommendedCandle': recommendedCandle,
    'candleReason': candleReason,
    'generatedAt': generatedAt.toIso8601String(),
    'zodiacSign': zodiacSign,
  };

  static ExtendedHoroscopeData fromFirestore(Map<String, dynamic> data) {
    return ExtendedHoroscopeData(
      careerPrediction: data['careerPrediction'] ?? '',
      lovePrediction: data['lovePrediction'] ?? '',
      financePrediction: data['financePrediction'] ?? '',
      healthPrediction: data['healthPrediction'] ?? '',
      personalGrowthPrediction: data['personalGrowthPrediction'] ?? '',
      familyPrediction: data['familyPrediction'] ?? '',
      moonPhase: data['moonPhase'] ?? '',
      moonEmoji: data['moonEmoji'] ?? '',
      recommendedCandle: data['recommendedCandle'] ?? '',
      candleReason: data['candleReason'] ?? '',
      generatedAt: DateTime.tryParse(data['generatedAt'] ?? '') ?? DateTime.now(),
      zodiacSign: data['zodiacSign'] ?? '',
    );
  }
}

